federatedETL:
  agentOnly: false
  federatedCluster: true
  
serviceAccount: 
# This example has Kubecost create the service account + annotation. It does not automatically configure the role to trust the service account.
# To use a dedicated service account, set create to false, remove the annotation, and specify the name of your dedicated service account. 
  create: true
  annotations: # Use the annotation for your cloud provider. This example uses AWS IAM Roles.
    eks.amazonaws.com/role-arn: arn:aws:iam::<account>:role/<roleName>
 # name: kubecost-serviceaccount
  
kubecostProductConfigs:
  # projectID: "AWS_kubecostProductConfigs_projectID"
  cloudIntegrationSecret: cloud-integration
  # clustername should be unique for all clusters
  clusterName: kubecostProductConfigs_clusterName
  # productKey:
  #   secretname: productkey
  #   enabled: false #not needed for eval
  # spot feed is optional and has low value when using cloud billing integration
  # awsSpotDataRegion: AWS_kubecostProductConfigs_awsSpotDataRegion
  # awsSpotDataBucket: AWS_kubecostProductConfigs_awsSpotDataBucket
  # awsSpotDataPrefix: dev
  
kubecostModel:
  federatedStorageConfigSecret: federated-store
  
prometheus:
  server:
    global:
      external_labels:
        # cluster_id should be unique for all clusters and the same value as .kubecostProductConfigs.clusterName
        cluster_id: kubecostProductConfigs_clusterName
      
networkCosts:
  enabled: true
  config:
    services:
      amazon-web-services: true
      # google-cloud-services: true
      # azure-cloud-services: true
